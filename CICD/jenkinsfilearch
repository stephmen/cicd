try{
    timeout(time: 20, unit: 'MINUTES') {
    node('maven'){
        stage('build & deploy in dev'){
        openshift.withCluster() {
               openshift.withProject('development') {
                   def bld = openshift.startBuild('myapp')
                   bld.untilEach {
                       return it.object().status.phase == "Running"
            }
        }
    }
        stage('verify deploy in dev'){
        openshift.withCluster() {
                openshift.withProject('development'){
                    def latestDeploymentVersion = openshift.selector('dc','myapp').object().status.latestVersion
                    def rc = openshift.selector('rc', "myapp-${latestDeploymentVersion}")
                    rc.untilEach(1){
                    def rcMap = it.object()
                        return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
            }
        }
    } 
    stage('deploy in test Image Tag') {
            openshift.withCluster() {
            openshift.tag( 'development/myapp:latest', 'development/myapp:promoteQA')
              
}
    stage('approval') {
                            timeout(time: 2, unit: 'DAYS') {
                            input message: "Start Testing Rollout ?"
                        }
     stage('deploy in test Rollout') {
            openshift.withCluster() {
              openshift.withProject('testing') {
                def dc = openshift.selector('dc', 'myapp')
                dc.rollout().latest()
              }
            }
     stage('verify deploy in testing'){
        openshift.withCluster() {
                openshift.withProject('testing'){
                    def latestDeploymentVersion = openshift.selector('dc','myapp').object().status.latestVersion
                    def rc = openshift.selector('rc', "myapp-${latestDeploymentVersion}")
                    rc.untilEach(1){
                    def rcMap = it.object()
                        return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
            }
        }
    } 
     }
    }
    stage('approval') {
                            timeout(time: 2, unit: 'DAYS') {
                            input message: "Start Production Rollout ?"
                        }
                            stage('Deploy in Production Image Tag') {
                                openshift.withCluster() {
                                openshift.tag( 'development/myapp:latest', 'development/myapp:promotePRD')
                    } 
                    }
                                stage('Deploy in Production Rollout') {
                                openshift.withCluster() {
                                openshift.withProject('production') {
                                def dc = openshift.selector('dc', 'myapp')
                                dc.rollout().latest()
              }
            }
     stage('Verify Deployment in Production'){
        openshift.withCluster() {
                openshift.withProject('production'){
                    def latestDeploymentVersion = openshift.selector('dc','myapp').object().status.latestVersion
                    def rc = openshift.selector('rc', "myapp-${latestDeploymentVersion}")
                    rc.untilEach(1){
                    def rcMap = it.object()
                        return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
            }
        }
            }  
	}     
          }
          }
    }
    }
    }
    }
    }
    }
    }
catch (err) {
   echo "in catch block"
   echo "Caught: ${err}"
   currentBuild.result = 'FAILURE'
   throw err
}
 